"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Copyright (c) 2020,2021,2022, StepZen, Inc.
const chalk = require("chalk");
const core_1 = require("@oclif/core");
const fs = require("fs-extra");
const path = require("path");
const prettyMilliseconds = require("pretty-ms");
const deploy_1 = require("../commands/deploy");
const configuration_1 = require("../shared/configuration");
const constants_1 = require("../shared/constants");
const upload_1 = require("../commands/upload");
const validate_1 = require("../commands/validate");
const dotenv = require('dotenv');
exports.default = async (file, workspace, flags) => {
    var e_1, _a;
    dotenv.config({ path: path.join(workspace.directory, '.env') });
    if (file) {
        console.log(`File changed: ${chalk.blue(file)}`);
    }
    const configuration = (await configuration_1.readConfiguration());
    if (!flags['no-validate']) {
        try {
            await validate_1.default.run([workspace.schema]);
        }
        catch (error) {
            console.log();
            console.log(chalk.red('Your local schema has the following GraphQL errors:'));
            console.log();
            console.log(error.message);
            return;
        }
    }
    core_1.CliUx.ux.action.start(`Deploying ${chalk.yellow(workspace.endpoint)} to StepZen`);
    const deployArgs = [workspace.endpoint, '--silent'];
    const uploadCmds = [];
    const configPath = path.join(workspace.schema, 'config.yaml');
    if (fs.existsSync(configPath)) {
        deployArgs.push('--configurationsets', `${workspace.endpoint},stepzen/default`);
        uploadCmds.push([
            'configurationset',
            workspace.endpoint,
            '--file',
            configPath,
            '--silent',
        ]);
    }
    else {
        deployArgs.push('--configurationsets', 'stepzen/default');
    }
    if (fs.existsSync(workspace.schema)) {
        deployArgs.push('--schema', workspace.endpoint);
        uploadCmds.push([
            'schema',
            workspace.endpoint,
            '--dir',
            workspace.schema,
            '--silent',
        ]);
    }
    const logError = (error) => {
        try {
            const zenctlError = JSON.parse(error.message);
            const msg = zenctlError[0].message;
            console.log('');
            console.log(chalk.red(msg));
        }
        catch (_a) {
            console.log('');
            console.log(chalk.red(error));
        }
    };
    const deployStart = new Date().getTime();
    try {
        for (var uploadCmds_1 = tslib_1.__asyncValues(uploadCmds), uploadCmds_1_1; uploadCmds_1_1 = await uploadCmds_1.next(), !uploadCmds_1_1.done;) {
            const cmd = uploadCmds_1_1.value;
            try {
                await upload_1.default.run(cmd);
            }
            catch (error) {
                logError(error);
                return;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (uploadCmds_1_1 && !uploadCmds_1_1.done && (_a = uploadCmds_1.return)) await _a.call(uploadCmds_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        await deploy_1.default.run(deployArgs);
    }
    catch (error) {
        logError(error);
        return;
    }
    const deployEnd = new Date().getTime();
    const deployTime = deployEnd - deployStart;
    core_1.CliUx.ux.action.stop(`${chalk.grey('done in')} ${prettyMilliseconds(deployTime)} ðŸš€`);
    const domain = constants_1.STEPZEN_DOMAIN.replace('.io', '.net');
    const endpoint = `https://${configuration.account}.${domain}/${workspace.endpoint}/__graphql`;
    console.log();
    console.log(chalk.grey(`Your API url is`, chalk.green(` ${endpoint}`)));
    console.log();
    if (process.platform === 'win32') {
        console.log(chalk.grey(`You can explore your hosted API with GraphiQL at `), chalk.green(` http://localhost:${flags.port}/${workspace.endpoint}`));
    }
    else {
        console.log(chalk.grey(`You can test your hosted API with cURL:`));
        console.log();
        console.log(`curl ${endpoint} \\`);
        console.log(`   --header "Authorization: Apikey $(stepzen whoami --apikey)" \\`);
        console.log(`   --header "Content-Type: application/json" \\`);
        console.log(`   --data '{"query": "your graphql query"}'`);
        console.log();
        console.log(chalk.grey(`or explore it with GraphiQL at`), chalk.green(` http://localhost:${flags.port}/${workspace.endpoint}`));
    }
};
