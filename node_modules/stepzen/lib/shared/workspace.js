"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkspace = void 0;
const errors_1 = require("@oclif/errors");
const fs = require("fs");
const os = require("os");
const path = require("path");
const utils_1 = require("./utils");
exports.getWorkspace = (directory) => {
    let workspaceRoot;
    const parts = path
        // Remove trailing slashes and any `..` and `.` segments
        .resolve(directory)
        // split into segments
        .split(path.sep);
    // Loop through this and all parent directories up to $HOME to find the root
    for (; parts.length > 0; parts.pop()) {
        const d = parts.join(path.sep);
        const f = path.join(d, 'stepzen.config.json');
        if (fs.existsSync(f)) {
            workspaceRoot = d;
            break;
        }
        if (d === os.homedir()) {
            break;
        }
    }
    if (!workspaceRoot) {
        return null;
    }
    const filepath = path.join(workspaceRoot, 'stepzen.config.json');
    const file = fs.readFileSync(filepath, 'utf8');
    let config;
    try {
        config = JSON.parse(file);
    }
    catch (_a) {
        throw new errors_1.CLIError(`Cannot parse configuration from ${filepath}`);
    }
    // Validate the workspace
    const error = utils_1.validateEndpoint(config.endpoint);
    if (typeof error === 'string') {
        throw new errors_1.CLIError(error);
    }
    // Add the 'schema' property, which is the directory + the 'root'
    const schema = path.join(workspaceRoot, config.root || '');
    if (!fs.existsSync(schema)) {
        throw new errors_1.CLIError(`Cannot find workspace schema folder ${schema}`);
    }
    return {
        directory: workspaceRoot,
        endpoint: config.endpoint,
        schema: schema,
    };
};
