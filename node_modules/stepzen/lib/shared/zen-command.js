"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZenCommand = void 0;
const command_1 = require("@oclif/command");
const inquirer = require("inquirer");
const chalk = require("chalk");
const configuration_1 = require("./configuration");
const stepzen_sdk_1 = require("./stepzen-sdk");
class ZenCommand extends command_1.Command {
    async ensureStepZenAccount() {
        const configuration = await configuration_1.readConfiguration();
        if ('account' in configuration) {
            return {
                configuration,
            };
        }
        return this.promptUserToLogIn(configuration.uuid);
    }
    async promptUserToLogIn(uuid) {
        this.log(chalk.bold(chalk.cyan('Welcome to the StepZen CLI!')));
        this.log('');
        this.log(`You are about to deploy your GraphQL API to the cloud on a public` +
            ` endpoint. Log in or create a StepZen account to get a` +
            ` production-ready GraphQL API deployed on a secure and private` +
            ` endpoint.`);
        this.log('');
        const answers = await inquirer.prompt([
            {
                message: 'How would you like to continue?',
                name: 'loginPath',
                type: 'list',
                choices: [
                    'Log in via stepzen.com',
                    'Continue without logging in (make your API public)',
                ],
            },
        ]);
        let configuration = null;
        if (answers.loginPath === 'Log in via stepzen.com') {
            const answers = await inquirer.prompt([
                {
                    message: 'What is your Admin Key?',
                    name: 'adminkey',
                    type: 'password',
                    validate: async (value) => {
                        try {
                            await stepzen_sdk_1.default.login(value);
                            return true;
                        }
                        catch (error) {
                            return `${error}`;
                        }
                    },
                    suffix: chalk.blue(` (available at ${chalk.bold('https://stepzen.com/account')})`),
                },
            ]);
            const credentials = await stepzen_sdk_1.default.login(answers.adminkey);
            configuration = await configuration_1.writeCredentialsToConfigFile(credentials);
            this.log('You have successfully logged in.');
            this.log('');
        }
        else {
            const credentials = await stepzen_sdk_1.default.createAnonymousAccount(uuid);
            configuration = await configuration_1.writeCredentialsToConfigFile(credentials);
            this.log(`We've created a temporary public account for you.\nAll endpoints` +
                ` deployed to this account will be automatically deleted after 24` +
                ` hours. You can log in with your regular StepZen account at any` +
                ` time by running ${chalk.bold('stepzen login')}.`);
            this.log('');
        }
        return { configuration };
    }
}
exports.ZenCommand = ZenCommand;
ZenCommand.flags = {
    'non-interactive': command_1.flags.boolean({
        description: 'disable all interactive prompts',
        hidden: true,
        default: () => {
            if (process.env.STEPZEN_INTERACTIVE !== undefined) {
                return process.env.STEPZEN_INTERACTIVE.toLowerCase() === 'false';
            }
            return !process.stdin.isTTY || !process.stdout.isTTY;
        },
    }),
};
exports.default = ZenCommand;
