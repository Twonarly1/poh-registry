"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
exports.maskStepZenKey = exports.validateEndpoint = exports.getStepZenExtensions = exports.getDirectory = exports.clearConsole = void 0;
const errors_1 = require("@oclif/errors");
const debug = require("debug");
const node_fetch_1 = require("node-fetch");
const fs = require("fs");
const os = require("os");
const path = require("path");
const prettier = require("prettier");
const constants_1 = require("./constants");
exports.clearConsole = () => {
    process.stdout.write(
    // Taken from create-react-app
    // eslint-disable-next-line unicorn/no-hex-escape
    process.platform === 'win32' ? '\x1B[2J\x1B[0f' : '\x1B[2J\x1B[3J\x1B[H');
};
exports.getDirectory = (d = process.cwd()) => {
    let directory = d;
    // If it starts with `~`, expand this
    if (directory.startsWith('~')) {
        directory = directory.replace('~', os.homedir());
    }
    // If it does not now start with `/`, then get the absolute path.
    // Also, remove any `..` and `.` segments.
    directory = path.resolve(directory);
    // If the path does not exist, throw an error
    if (!fs.existsSync(directory)) {
        throw new errors_1.CLIError(`Cannot find ${directory}`);
    }
    return directory;
};
exports.getStepZenExtensions = async () => {
    const domain = constants_1.STEPZEN_DOMAIN.replace('.io', '.net');
    const url = `https://www.${domain}/directives.graphql`;
    const response = await node_fetch_1.default(url);
    const schema = await response.text();
    const formatted = prettier.format(schema, { parser: 'graphql' });
    debug('stepzen:extensions')(`Fetching StepZen extensions from ${url}`);
    debug('stepzen:extensions')(`Extensions: ${formatted}`);
    return formatted;
};
exports.validateEndpoint = (endpoint) => {
    const error = 'The endpoint must be of the format [folder]/[name], matching the pattern ^[\\w-]+$';
    if (endpoint.includes('/') === false)
        return error;
    const parts = endpoint.split('/');
    if (parts.some(part => part.trim() === ''))
        return error;
    if (parts.some(part => part.match(/^[\d_-]+.*$/)))
        return error;
    if (parts.some(part => !part.match(/^[\w-]+$/)))
        return error;
    return true;
};
exports.maskStepZenKey = (key) => {
    const parts = key.split('::');
    const thirdPart = parts[2];
    const firstTwoChars = thirdPart.substring(0, 2);
    const lastTwoChars = thirdPart.slice(-2);
    const stars = '*'.repeat(thirdPart.length - 4);
    const maskedThirdPart = `${firstTwoChars}${stars}${lastTwoChars}`;
    const masked = `${parts[0]}::${parts[1]}::${maskedThirdPart}  `;
    return masked;
};
