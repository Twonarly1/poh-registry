"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
exports.guessSchemaRoot = exports.generateWorkspaceName = exports.validateWorkspaceName = void 0;
const command_1 = require("@oclif/command");
const errors_1 = require("@oclif/errors");
const fs = require("fs");
const glob = require("glob");
const inquirer = require("inquirer");
const os = require("os");
const path = require("path");
const utils_1 = require("../shared/utils");
const moniker_1 = require("../shared/moniker");
const workspace_1 = require("../shared/workspace");
const zen_command_1 = require("../shared/zen-command");
exports.validateWorkspaceName = (directory, name) => {
    return !fs.existsSync(path.join(directory, name));
};
exports.generateWorkspaceName = (directory) => {
    let name = 'hello-stepzen';
    while (!exports.validateWorkspaceName(directory, name)) {
        name = `hello-${moniker_1.getRandomDescriptor()}-stepzen`;
    }
    return name;
};
exports.guessSchemaRoot = (directory) => {
    const existing = [
        ...glob.sync('*/**/config.yaml', {
            cwd: directory,
            ignore: '**/node_modules/**',
        }),
        ...glob.sync('*/**/index.graphql', {
            cwd: directory,
            ignore: '**/node_modules/**',
        }),
    ];
    return existing.length > 0 ? path.dirname(existing[0]) : '';
};
class Init extends zen_command_1.default {
    async run() {
        const { args, flags } = this.parse(Init);
        // Get the correct directory
        let directory = utils_1.getDirectory(args.directory);
        // Make sure it is not already a workspace
        if (workspace_1.getWorkspace(directory)) {
            throw new errors_1.CLIError(`This directory is already a StepZen workspace: ${directory}.` +
                ' Please select a different directory.');
        }
        const isHomeDir = directory === os.homedir();
        // Prevent init from running in the home directory if the directory was
        // explicitly provided as an aargument to `stepzen init`.
        // StepZen CLI sometimes would enumerate all files in the workspace folder
        // doing so in the home directory is likely to fail.
        if (args.directory && isHomeDir) {
            throw new errors_1.CLIError('Using the home directory as a StepZen workspace is not supported.' +
                ' Please select a different directory.');
        }
        // Make a suggestion for the workspace name (if running in the HOME
        // directory)
        const name = isHomeDir
            ? exports.generateWorkspaceName(directory)
            : path.basename(directory);
        // See if we think there's a StepZen schema already
        const root = isHomeDir ? '' : exports.guessSchemaRoot(directory);
        // If you've passed an endpoint, validate it, and throw an error
        // straight away if needed
        if (flags.endpoint) {
            const error = utils_1.validateEndpoint(flags.endpoint);
            if (typeof error === 'string') {
                throw new errors_1.CLIError(error);
            }
        }
        // Make a suggestion for the endpoint
        const endpoint = flags.endpoint || `api/${moniker_1.default()}`;
        // What questions will we ask?
        const questions = [
            {
                default: name,
                message: 'What would you like to call your workspace?',
                name: 'name',
                validate: (name) => exports.validateWorkspaceName(directory, name),
                when: isHomeDir && !flags.yes,
            },
            {
                default: endpoint,
                message: 'What would you like your endpoint to be called?',
                name: 'endpoint',
                validate: utils_1.validateEndpoint,
                when: !flags.endpoint && !flags.yes,
            },
            {
                message: `We have detected a schema in this directory. Set the schema root to "${root}"?`,
                name: 'use-root',
                type: 'confirm',
                when: Boolean(root) && !flags.yes,
            },
        ];
        // Get the answers
        const answers = Object.assign({ name,
            endpoint, 'use-root': true }, (await inquirer.prompt(questions)));
        // Append the suggested workspace name to the directory (if running
        // in the HOME directory)
        if (isHomeDir) {
            // eslint-disable-next-line require-atomic-updates
            directory = path.join(directory, answers.name);
            fs.mkdirSync(directory);
        }
        // Create the workspace
        const workspace = { endpoint: answers.endpoint };
        if (root && answers['use-root'])
            workspace.root = root;
        // Write the file
        const file = path.join(directory, 'stepzen.config.json');
        fs.writeFileSync(file, JSON.stringify(workspace, null, '  '));
        // Fetch the newly created workspace
        const created = workspace_1.getWorkspace(directory);
        // Done!
        this.log(`Created a StepZen workspace in ${created.directory}`);
        return created;
    }
}
exports.default = Init;
Init.description = 'stepzen init';
Init.hidden = true;
Init.flags = Object.assign(Object.assign({}, zen_command_1.default.flags), { endpoint: command_1.flags.string({ hidden: true }), help: command_1.flags.help({ char: 'h' }), yes: command_1.flags.boolean({ default: false, hidden: true }) });
Init.args = [
    {
        hidden: true,
        name: 'directory',
    },
];
