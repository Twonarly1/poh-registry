"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
// This file contains the code for the `stepzen login` command.
// Stepzen login checks that credentials presented are good and
// subsequently changes the identity of the logged in account.
const command_1 = require("@oclif/command");
const core_1 = require("@oclif/core");
const chalk = require("chalk");
const configuration_1 = require("../shared/configuration");
const stepzen_sdk_1 = require("../shared/stepzen-sdk");
const zen_command_1 = require("../shared/zen-command");
class Login extends zen_command_1.default {
    async run() {
        const { flags } = this.parse(Login);
        let configuration;
        if (flags.public) {
            const { uuid } = await configuration_1.readConfiguration();
            configuration = await stepzen_sdk_1.default.createAnonymousAccount(uuid);
        }
        else {
            let account;
            let adminkey;
            // If the --config flag is provided, try and log in using the details in the file
            if (flags.config) {
                const config = await configuration_1.importConfiguration(flags.config);
                account = config.account;
                adminkey = config.adminkey;
            }
            else {
                // Check if the --account flag is provided, and if not prompt the user for an account name
                if (flags.account) {
                    account = flags.account;
                }
                else {
                    account = await core_1.CliUx.ux.prompt('What is your account name?');
                }
                // Check if the --adminkey flag is provided, and if not prompt the user for an admin key.
                if (flags.adminkey === undefined) {
                    adminkey = await core_1.CliUx.ux.prompt('What is your admin key?', {
                        required: false,
                        type: 'hide',
                    });
                }
                else {
                    adminkey = flags.adminkey;
                }
            }
            configuration = await stepzen_sdk_1.default.login(adminkey, account);
        }
        // Change the default account.
        configuration_1.writeCredentialsToConfigFile(configuration);
        this.log(`You have successfully logged in as ${chalk.bold(configuration.account)}.`);
    }
}
exports.default = Login;
Login.description = 'Log in to StepZen';
Login.flags = Object.assign(Object.assign({}, zen_command_1.default.flags), { account: command_1.flags.string({
        char: 'a',
        exclusive: ['config', 'public'],
        hidden: true,
    }), adminkey: command_1.flags.string({
        char: 'k',
        exclusive: ['config', 'public'],
        hidden: true,
    }), public: command_1.flags.boolean({
        description: 'Create a public anonymous StepZen account and use it. This is handy' +
            ' for trying StepZen out, but it not suitable for handling private' +
            ' data as all endpoints created with a public account will be public.',
        exclusive: ['config', 'account', 'adminkey'],
    }), config: command_1.flags.string({
        exclusive: ['account', 'adminkey', 'public'],
        hidden: true,
    }), help: command_1.flags.help({ char: 'h' }) });
