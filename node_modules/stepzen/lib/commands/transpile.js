"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const command_1 = require("@oclif/command");
const errors_1 = require("@oclif/errors");
const fs = require("fs-extra");
const path = require("path");
const utils_1 = require("../shared/utils");
const zen_command_1 = require("../shared/zen-command");
const { configure, stitch, validate } = require('@stepzen/transpiler');
class Transpile extends zen_command_1.default {
    async run() {
        const { args, flags } = this.parse(Transpile);
        const folder = utils_1.getDirectory(args.folder);
        // CONFIG
        if (flags['output-configuration']) {
            const config = await configure(folder, flags.silent);
            if (flags['hide-output']) {
                return config;
            }
            this.log(config);
            return;
        }
        // SCHEMA
        try {
            const schema = stitch(folder);
            validate(schema, {
                extensions: await utils_1.getStepZenExtensions(),
            });
            const file = path.join(schema, 'index.graphql');
            const stitched = fs.readFileSync(file, 'utf8');
            this.log(stitched);
        }
        catch (error) {
            throw new errors_1.CLIError(chalk.red(error));
        }
    }
}
exports.default = Transpile;
Transpile.description = 'transpile a graphql schema';
Transpile.hidden = true;
Transpile.flags = Object.assign(Object.assign({}, zen_command_1.default.flags), { config: command_1.flags.string({ hidden: true }), help: command_1.flags.help({ char: 'h' }), 'hide-output': command_1.flags.boolean({ hidden: true }), inspect: command_1.flags.boolean({ char: 'i', hidden: true }), 'inspect-after': command_1.flags.boolean({ hidden: true }), 'output-configuration': command_1.flags.boolean(), silent: command_1.flags.boolean() });
Transpile.args = [
    {
        name: 'folder',
        required: true,
    },
];
