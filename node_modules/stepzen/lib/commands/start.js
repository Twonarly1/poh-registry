"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
const chokidar = require("chokidar");
const core_1 = require("@oclif/core");
const command_1 = require("@oclif/command");
const errors_1 = require("@oclif/errors");
const throttle_debounce_1 = require("throttle-debounce");
const detect = require("detect-port");
const utils_1 = require("../shared/utils");
const start_1 = require("../start");
const workspace_1 = require("../shared/workspace");
const init_1 = require("./init");
const dashboard_interface_1 = require("../generate/dashboard-interface");
const constants_1 = require("../shared/constants");
const zen_command_1 = require("../shared/zen-command");
const dashboard = require('@stepzen/dashboard');
const { version } = require('../../package.json');
class Start extends zen_command_1.default {
    async run() {
        const { flags } = this.parse(Start);
        const { configuration } = await this.ensureStepZenAccount();
        // Get the working directory and workspace
        let workspace;
        const directory = utils_1.getDirectory(flags.dir);
        const maybeWorkspace = workspace_1.getWorkspace(directory);
        if (maybeWorkspace) {
            workspace = maybeWorkspace;
        }
        else {
            const initArgs = [directory];
            if (flags.endpoint) {
                initArgs.push('--endpoint', flags.endpoint);
            }
            try {
                workspace = await init_1.default.run(initArgs);
            }
            catch (error) {
                throw new errors_1.CLIError(`Could not create a StepZen workspace in the ${flags.dir ? directory : 'current'} directory.\n` + error.message);
            }
        }
        // If you have overridden the endpoint, set it
        if (flags.endpoint) {
            // eslint-disable-next-line require-atomic-updates
            workspace.endpoint = flags.endpoint;
        }
        // Check the port is available
        const port = await detect(flags.port);
        if (flags.port !== port) {
            throw new errors_1.CLIError(`Could not start - port ${flags.port} is already in use`);
        }
        // This is the file watcher
        if (!flags['no-watcher']) {
            chokidar
                .watch(workspace.schema, {
                ignored: '**/*.js',
            })
                .on('change', throttle_debounce_1.debounce(500, async (path) => {
                utils_1.clearConsole();
                await start_1.deploy(path, workspace, flags);
                await start_1.console(workspace);
            }));
        }
        // Start!
        utils_1.clearConsole();
        core_1.CliUx.ux.action.start('Starting...');
        // Unless explicitly disabled, auto-init
        if (!flags['no-init']) {
            await start_1.deploy(null, workspace, flags);
        }
        if (!flags['no-console']) {
            start_1.console(workspace);
        }
        // Create the dashboard
        if (!flags['no-dashboard']) {
            const ui = await dashboard({
                account: configuration.account,
                adminkey: configuration.adminkey,
                apikey: configuration.apikey,
                cli: {
                    version,
                },
                domain: constants_1.STEPZEN_DOMAIN,
                generators: dashboard_interface_1.createDashboardInterface(workspace),
                predicates: {
                    available: true,
                    enabled: false,
                    onTogglePredicates: async () => null,
                },
                port: flags.port,
                workspace,
            });
            await ui.start();
        }
        // Done
        core_1.CliUx.ux.action.stop();
    }
}
exports.default = Start;
Start.description = 'upload and deploy your schema';
Start.flags = Object.assign(Object.assign({}, zen_command_1.default.flags), { dir: command_1.flags.string({ description: 'working directory' }), endpoint: command_1.flags.string({ description: 'Override workspace endpoint' }), help: command_1.flags.help({ char: 'h' }), 'no-console': command_1.flags.boolean({ hidden: true }), 'no-dashboard': command_1.flags.boolean({ hidden: true }), 'no-init': command_1.flags.boolean({ hidden: true }), 'no-server': command_1.flags.boolean({ hidden: true }), 'no-validate': command_1.flags.boolean({ hidden: true }), 'no-watcher': command_1.flags.boolean({ hidden: true }), port: command_1.flags.integer({ default: 5001, env: 'PORT' }) });
Start.args = [];
