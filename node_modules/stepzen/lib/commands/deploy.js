"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
// This file contains the code for the `stepzen deploy` command.
// Deployment in stepzen is an operation that takes three classes of uploaded
// objects, a single schema, and a collection of configurationsets
// and uses them to produce an endpoint which serves a GraphQL API.
const command_1 = require("@oclif/command");
const errors_1 = require("@oclif/errors");
const actions_1 = require("../shared/actions");
const zen_command_1 = require("../shared/zen-command");
class Deploy extends zen_command_1.default {
    async run() {
        const { args, flags } = this.parse(Deploy);
        // Make sure that you definitely specify folder/name
        if (args.destination.includes('/') === false) {
            throw new errors_1.CLIError('You must specify the folder/name you want to use');
        }
        const { configuration } = await this.ensureStepZenAccount();
        if (!flags.silent) {
            this.log('Deploying...');
        }
        // If this is a public account, add a special configuration set to make the
        // endpoint public (https://github.com/steprz/zen/pull/5701)
        if (configuration.account.startsWith('public')) {
            flags.configurationsets = flags.configurationsets
                ? `${flags.configurationsets},stepzen/public`
                : 'stepzen/public';
        }
        const response = await actions_1.deploy(args.destination, flags.configurationsets, flags.schema);
        if (response.success) {
            if (!flags.silent) {
                this.log(response.message || 'Success');
            }
        }
        else {
            // Errors. Exit, and output the server's error response
            throw new errors_1.CLIError(JSON.stringify(response.errors) || 'An error occurred.');
        }
    }
}
exports.default = Deploy;
Deploy.description = 'deploy to stepzen';
Deploy.flags = Object.assign(Object.assign({}, zen_command_1.default.flags), { 
    // configurationsets is assumed to be a comma separated string naming uploaded configurationsets
    // a special configuration 'stepzen/defaults' is recognized.
    configurationsets: command_1.flags.string({
        description: 'Configurationsets to use',
        default: '',
    }), help: command_1.flags.help({ char: 'h' }), schema: command_1.flags.string({ description: 'Schema to use', required: true }), silent: command_1.flags.boolean() });
Deploy.args = [
    {
        name: 'destination',
        description: 'destination',
        required: true,
    },
];
