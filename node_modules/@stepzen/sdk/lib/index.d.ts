import { AnonymousClientOptions, SDKConfiguration, UserCredentialsClientOptions } from './shared/types';
export declare const init: (sdkConfig: SDKConfiguration) => {
    verify: (account: string, adminkey: string) => Promise<boolean>;
    client: (options: UserCredentialsClientOptions | AnonymousClientOptions) => Promise<{
        readonly credentials: {
            account: string;
            adminkey: string;
            apikey: string;
        };
        account: () => Promise<{
            account: string;
            apikey: string;
        } | {
            success: false;
            errors: string[];
        }>;
        deploy: (destination: string, properties: {
            configurationsets?: string[] | undefined;
            schema: string;
        }) => Promise<import("./client").ZenCtlResponse>;
        list: {
            configurationsets: () => Promise<import("./client").ZenCtlResponse>;
            schemas: () => Promise<import("./client").ZenCtlResponse>;
        };
        upload: {
            configurationset: (destination: string, file: string) => Promise<import("./client").ZenCtlResponse>;
            schema: (destination: string, directory: string) => Promise<import("./client").ZenCtlResponse>;
        };
    }>;
};
declare type PromisedType<T> = T extends Promise<infer U> ? U : T;
export declare type SDK = ReturnType<typeof init>;
export declare type SDKClient = PromisedType<ReturnType<SDK['client']>>;
/**
 * The default SDK instance that does not know the name of the app using the SDK.
 * It tries to guess the app name from `process.argv`
 *
 * @deprecated use the init({appName: 'my-app/1.2.3'}) method to initialis an SDK instance
 */
declare const stepzen: SDK;
export default stepzen;
