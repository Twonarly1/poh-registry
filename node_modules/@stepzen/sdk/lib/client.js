"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSdkClient = exports.validateCreateClientOptions = void 0;
const tslib_1 = require("tslib");
const account_1 = require("./commands/account");
const deploy_1 = require("./commands/deploy");
const list_1 = require("./commands/list");
const upload_1 = require("./commands/upload");
const getPublicAccount_1 = require("./commands/getPublicAccount");
tslib_1.__exportStar(require("./shared/types"), exports);
const validateCreateClientOptions = async (options, sdkConfig) => {
    let credentials;
    let account;
    if ('publicAccountToken' in options) {
        // create an anonymous account and use it to initialize an SDK client instance
        const credentialsOrError = await getPublicAccount_1.default(options, sdkConfig);
        if ('errors' in credentialsOrError) {
            throw new Error(`An unexpected error occurred. ${JSON.stringify(credentialsOrError.errors)}`);
        }
        credentials = credentialsOrError;
        account = Object.assign(Object.assign({}, credentialsOrError), { server: options.server, domain: options.domain });
    }
    else {
        // use the provided account to initialize an SDK client instance
        options.server = options.server.replace('{account}', options.account);
        let accountOrError;
        try {
            accountOrError = await account_1.default(options, sdkConfig);
        }
        catch (error) {
            if (error instanceof Error &&
                error.message.includes('Please check your authentication details')) {
                throw new Error('Your credentials are invalid.');
            }
            else {
                throw new Error(`An unexpected error occurred. ${error}`);
            }
        }
        if ('errors' in accountOrError) {
            throw new Error(`An unexpected error occurred. ${JSON.stringify(accountOrError.errors)}`);
        }
        account = options;
        credentials = {
            account: options.account,
            adminkey: options.adminkey,
            apikey: accountOrError.apikey,
        };
    }
    return { account, credentials };
};
exports.validateCreateClientOptions = validateCreateClientOptions;
const createSdkClient = async (options, sdkConfig) => {
    const { account, credentials } = await exports.validateCreateClientOptions(options, sdkConfig);
    return {
        get credentials() {
            // always return a copy to avoid accidential modification by the caller
            return Object.assign({}, credentials);
        },
        /**
         * @deprecated use `.credentials` or create a new SDK client instead
         **/
        account: () => {
            return account_1.default(account, sdkConfig);
        },
        deploy: (destination, properties) => {
            return deploy_1.default(Object.assign({ destination }, properties), account, sdkConfig);
        },
        list: {
            configurationsets: async () => {
                return list_1.default({ type: 'configurationsets' }, account, sdkConfig);
            },
            schemas: async () => {
                return list_1.default({ type: 'schemas' }, account, sdkConfig);
            },
        },
        upload: {
            configurationset: async (destination, file) => {
                return upload_1.default({ type: 'configurationset', destination, file }, account, sdkConfig);
            },
            schema: async (destination, directory) => {
                return upload_1.default({ type: 'schema', destination, directory }, account, sdkConfig);
            },
        },
    };
};
exports.createSdkClient = createSdkClient;
//# sourceMappingURL=client.js.map