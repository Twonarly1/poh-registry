import { AnonymousClientOptions, SDKConfiguration, StepZenAccount, StepZenCredentials } from './shared/types';
export * from './shared/types';
export declare const validateCreateClientOptions: (options: StepZenAccount | Required<AnonymousClientOptions>, sdkConfig: SDKConfiguration) => Promise<{
    account: StepZenAccount;
    credentials: StepZenCredentials;
}>;
export declare const createSdkClient: (options: Required<StepZenAccount | AnonymousClientOptions>, sdkConfig: SDKConfiguration) => Promise<{
    readonly credentials: {
        account: string;
        adminkey: string;
        apikey: string;
    };
    /**
     * @deprecated use `.credentials` or create a new SDK client instead
     **/
    account: () => Promise<{
        account: string;
        apikey: string;
    } | {
        success: false;
        errors: string[];
    }>;
    deploy: (destination: string, properties: {
        configurationsets?: string[];
        schema: string;
    }) => Promise<import("./shared/types").ZenCtlResponse>;
    list: {
        configurationsets: () => Promise<import("./shared/types").ZenCtlResponse>;
        schemas: () => Promise<import("./shared/types").ZenCtlResponse>;
    };
    upload: {
        configurationset: (destination: string, file: string) => Promise<import("./shared/types").ZenCtlResponse>;
        schema: (destination: string, directory: string) => Promise<import("./shared/types").ZenCtlResponse>;
    };
}>;
