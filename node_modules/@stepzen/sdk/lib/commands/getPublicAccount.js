"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require("debug");
const node_fetch_1 = require("node-fetch");
const request_1 = require("../shared/request");
exports.default = async (options, sdkConfig) => {
    var _a, _b;
    const account = process.env.STEPZEN_PUBLIC_ACCOUNT_API_ACCOUNT || 'stepzen';
    const endpoint = process.env.STEPZEN_PUBLIC_ACCOUNT_API_ENDPOINT || 'api/publicaccount';
    const server = options.server
        .replace('{account}', account)
        .replace('.io', '.net');
    const url = new URL(`${server}/${endpoint}/__graphql`);
    // Inlclude the token into the URL so that it is visible in the logs
    // (allows StepZen to do analytics based on the GCP logs).
    url.searchParams.set('token', options.publicAccountToken);
    try {
        debug('stepzen:createAnonymousAccount')(url);
        const response = await node_fetch_1.default(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': request_1.getUserAgent(sdkConfig),
            },
            body: JSON.stringify({
                query: `query (
              $token: String!
            ) {
              getAccountDetails(
                token: $token
              ) {
                account: accountName
                adminkey: adminKey
                apikey: apiKey
              }
            }`,
                variables: {
                    token: options.publicAccountToken,
                },
            }),
        });
        const json = await response.json();
        debug('stepzen:createAnonymousAccount')(json);
        if (json.errors) {
            return {
                success: false,
                errors: json.errors,
            };
        }
        if (!((_a = json.data) === null || _a === void 0 ? void 0 : _a.getAccountDetails)) {
            throw new Error('No data returned from the API endpoint.');
        }
        return (_b = json.data) === null || _b === void 0 ? void 0 : _b.getAccountDetails;
    }
    catch (error) {
        throw new Error(`Could not create a public account (${error})`);
    }
};
//# sourceMappingURL=getPublicAccount.js.map