// Copyright (c) 2020,2021,2022, StepZen, Inc.

import * as debug from 'debug'
import fetch from 'node-fetch'

import {getUserAgent} from '../shared/request'
import {
  AnonymousClientOptions,
  SDKConfiguration,
  StepZenCredentials,
} from '../shared/types'

export default async (
  options: Required<AnonymousClientOptions>,
  sdkConfig: SDKConfiguration,
): Promise<
  | StepZenCredentials
  | {
      success: false
      errors: string[]
    }
> => {
  const account = process.env.STEPZEN_PUBLIC_ACCOUNT_API_ACCOUNT || 'stepzen'
  const endpoint =
    process.env.STEPZEN_PUBLIC_ACCOUNT_API_ENDPOINT || 'api/publicaccount'
  const server = options.server
    .replace('{account}', account)
    .replace('.io', '.net')

  const url = new URL(`${server}/${endpoint}/__graphql`)
  // Inlclude the token into the URL so that it is visible in the logs
  // (allows StepZen to do analytics based on the GCP logs).
  url.searchParams.set('token', options.publicAccountToken)

  try {
    debug('stepzen:createAnonymousAccount')(url)
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': getUserAgent(sdkConfig),
      },
      body: JSON.stringify({
        query: `query (
              $token: String!
            ) {
              getAccountDetails(
                token: $token
              ) {
                account: accountName
                adminkey: adminKey
                apikey: apiKey
              }
            }`,
        variables: {
          token: options.publicAccountToken,
        },
      }),
    })
    const json = await response.json()
    debug('stepzen:createAnonymousAccount')(json)
    if (json.errors) {
      return {
        success: false,
        errors: json.errors,
      }
    }

    if (!json.data?.getAccountDetails) {
      throw new Error('No data returned from the API endpoint.')
    }

    return json.data?.getAccountDetails
  } catch (error) {
    throw new Error(`Could not create a public account (${error})`)
  }
}
