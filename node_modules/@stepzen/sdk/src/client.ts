// Copyright (c) 2020,2021,2022, StepZen, Inc.

import accountCommand from './commands/account'
import deploy from './commands/deploy'
import {
  AnonymousClientOptions,
  SDKConfiguration,
  StepZenAccount,
  StepZenCredentials,
} from './shared/types'
import list from './commands/list'
import upload from './commands/upload'
import getPublicAccount from './commands/getPublicAccount'

export * from './shared/types'

export const validateCreateClientOptions = async (
  options: StepZenAccount | Required<AnonymousClientOptions>,
  sdkConfig: SDKConfiguration,
) => {
  let credentials: StepZenCredentials
  let account: StepZenAccount

  if ('publicAccountToken' in options) {
    // create an anonymous account and use it to initialize an SDK client instance
    const credentialsOrError = await getPublicAccount(options, sdkConfig)
    if ('errors' in credentialsOrError) {
      throw new Error(
        `An unexpected error occurred. ${JSON.stringify(
          credentialsOrError.errors,
        )}`,
      )
    }

    credentials = credentialsOrError
    account = {
      ...credentialsOrError,
      server: options.server,
      domain: options.domain,
    }
  } else {
    // use the provided account to initialize an SDK client instance
    options.server = options.server.replace('{account}', options.account)
    let accountOrError
    try {
      accountOrError = await accountCommand(options, sdkConfig)
    } catch (error) {
      if (
        error instanceof Error &&
        error.message.includes('Please check your authentication details')
      ) {
        throw new Error('Your credentials are invalid.')
      } else {
        throw new Error(`An unexpected error occurred. ${error}`)
      }
    }

    if ('errors' in accountOrError) {
      throw new Error(
        `An unexpected error occurred. ${JSON.stringify(
          accountOrError.errors,
        )}`,
      )
    }

    account = options

    credentials = {
      account: options.account,
      adminkey: options.adminkey,
      apikey: accountOrError.apikey,
    }
  }
  return {account, credentials}
}

export const createSdkClient = async (
  options: Required<StepZenAccount | AnonymousClientOptions>,
  sdkConfig: SDKConfiguration,
) => {
  const {account, credentials} = await validateCreateClientOptions(
    options,
    sdkConfig,
  )

  return {
    get credentials() {
      // always return a copy to avoid accidential modification by the caller
      return {...credentials}
    },
    /**
     * @deprecated use `.credentials` or create a new SDK client instead
     **/
    account: () => {
      return accountCommand(account, sdkConfig)
    },
    deploy: (
      destination: string,
      properties: {
        configurationsets?: string[]
        schema: string
      },
    ) => {
      return deploy({destination, ...properties}, account, sdkConfig)
    },
    list: {
      configurationsets: async () => {
        return list({type: 'configurationsets'}, account, sdkConfig)
      },
      schemas: async () => {
        return list({type: 'schemas'}, account, sdkConfig)
      },
    },
    upload: {
      configurationset: async (destination: string, file: string) => {
        return upload(
          {type: 'configurationset', destination, file},
          account,
          sdkConfig,
        )
      },
      schema: async (destination: string, directory: string) => {
        return upload(
          {type: 'schema', destination, directory},
          account,
          sdkConfig,
        )
      },
    },
  }
}
