{"version":3,"sources":["components/Generator/CatalogueItem/index.js","components/Generator/Categories/index.js","components/Generator/Catalogue/index.js","assets/images/logo.svg","components/Error/index.js","components/GraphiQLPanel/index.js","components/Loading/index.js","components/Forms/Button/index.js","components/Forms/Checkbox/index.js","components/Forms/TextArea/index.js","components/Forms/TextField/index.js","components/Generator/Questions/ListQuestion/index.js","components/Generator/Questions/TextQuestion/index.js","components/Generator/Questions/index.js","components/Generator/Results/index.js","components/Generator/index.js","components/Redirection/index.js","components/ServerStatus/index.js","components/PredicatesToggle/index.js","components/SettingsPanel/index.js","components/SettingsToggle/index.js","helpers/localStorage.js","helpers/snippets.js","components/Explorer/index.js","index.js"],"names":["CatalogueItem","disabled","item","index","onSelect","view","className","htmlFor","onClick","alt","name","src","image","description","Categories","categories","category","setCategory","handleOnChange","evt","value","target","defaultChecked","id","onChange","type","map","Catalogue","catalogue","cats","JSON","parse","cat","includes","push","sort","a","b","toLowerCase","useState","filter","Error","text","logo","GraphiQLPanel","body","footer","onTogglePanel","title","Loading","Button","children","Checkbox","checked","label","readonly","readOnly","TextArea","placeholder","required","rows","defaultValue","TextField","ListQuestion","answers","question","handleOnChangeCheckbox","current","split","answer","concat","join","simulated","message","choices","choice","TextQuestion","REACT_APP_IS_DEVELOPMENT","process","Questions","selected","setAnswers","setResults","setSelected","questions","setQuestions","errors","setErrors","loading","setLoading","status","setStatus","useEffect","handleOnConfigure","handleOnCancel","preventDefault","updated","set","trim","merged","merge","host","window","location","origin","replace","fetch","stringify","response","json","error","handleOnImport","length","onSubmit","Results","onToggleGenerator","results","Generator","setCatalogue","setError","startView","localStorage","getItem","setView","handleSwitchView","setItem","icon","faList","faThLarge","Redirection","useParams","folder","history","useHistory","endpoint","workspace","parts","ServerStatus","PredicatesToggle","available","setAvailable","enabled","setEnabled","predicatesHeaders","setPredicatesHeaders","predicates","updatePredicates","headers","yaml","method","handleOnChangePredicatesHeaders","handleUpdateSettings","SettingsPanel","SettingsToggle","key","removeItem","getQuery","arg","spaceCount","anonymousQuery","operationDataList","query","repeat","snippets","language","codeMirrorMode","options","generate","Explorer","search","useLocation","storage","useMemo","details","setDetails","explorerIsOpen","setExplorerIsOpen","exporterIsOpen","setExporterIsOpen","isError","setIsError","generatorIsOpen","setGeneratorIsOpen","settingsIsOpen","setSettingsIsOpen","graphiQL","setGraphiQL","setQuery","schema","setSchema","serverAvailable","setServerAvailable","interval","setInterval","console","log","clearInterval","fetcher","useCallback","graphQLParams","then","result","samples","document","getIntrospectionQuery","data","buildClientSchema","catch","params","URLSearchParams","get","queries","slice","last","ok","handleEditQuery","handleToggleExplorer","isOpen","handleToggleExporter","handleToggleGenerator","handleToggleSettings","onClose","onEdit","onRunOperation","operationName","handleRunQuery","onToggleExplorer","onEditQuery","ref","Logo","Footer","Toolbar","handlePrettifyQuery","handleToggleHistory","codeMirrorTheme","hideCodeExporter","ReactDOM","render","StrictMode","exact","path","component","getElementById"],"mappings":"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","file":"static/js/main.d5c99a36.chunk.js","sourcesContent":["function CatalogueItem({\n  disabled = false,\n  item,\n  index = 'standalone',\n  onSelect = () => {},\n  view = 'list',\n}) {\n  return (\n    <button\n      className={`catalogue-card is-${view}`}\n      disabled={disabled}\n      htmlFor={`catalogue_item_${index}`}\n      onClick={() => onSelect(item)}\n    >\n      <div className=\"catalogue-card-image\">\n        <img alt={`${item.name} logo`} src={item.image} />\n      </div>\n      <div className=\"catalogue-card-content\">\n        <h3 className=\"catalogue-card-title\">{item.name}</h3>\n        {item.description ? (\n          <p className=\"catalogue-card-text\">{item.description}</p>\n        ) : null}\n      </div>\n    </button>\n  )\n}\n\nexport default CatalogueItem\n","import './Categories.scss'\n\nfunction Categories({categories, category, setCategory}) {\n  const handleOnChange = evt => {\n    const {value} = evt.target\n    setCategory(value)\n  }\n\n  return (\n    <form className=\"generator-categories\">\n      <ul className=\"list\">\n        <li className=\"list-item\">\n          <p className=\"label\">Filter: </p>\n        </li>\n        <li className=\"list-item\" key={`generator_category_all`}>\n          <input\n            defaultChecked={!category}\n            id={`generator_category_all`}\n            name=\"generator_category\"\n            onChange={handleOnChange}\n            type=\"radio\"\n            value=\"\"\n          />\n          <label htmlFor={`generator_category_all`}>All</label>\n        </li>\n        {categories.map(item => (\n          <li className=\"list-item\" key={`generator_category_${item}`}>\n            <input\n              defaultChecked={category === item}\n              id={`generator_category_${item}`}\n              name=\"generator_category\"\n              onChange={handleOnChange}\n              type=\"radio\"\n              value={item}\n            />\n            <label htmlFor={`generator_category_${item}`}>{item}</label>\n          </li>\n        ))}\n      </ul>\n    </form>\n  )\n}\n\nexport default Categories\n","import {useState} from 'react'\n\nimport CatalogueItem from '../CatalogueItem'\nimport Categories from '../Categories'\n\nimport './Catalogue.scss'\n\nfunction Catalogue({catalogue, onSelect, view = 'list'}) {\n  let categories = []\n  for (const item of catalogue) {\n    const cats = JSON.parse(item.categories)\n    for (const cat of cats) {\n      if (categories.includes(cat) === false) categories.push(cat)\n    }\n  }\n  categories.sort((a, b) => (a.toLowerCase() > b.toLowerCase() ? 1 : -1))\n\n  const [category, setCategory] = useState()\n\n  const filtered = () => {\n    return !category\n      ? catalogue\n      : catalogue.filter(item => {\n          const cats = JSON.parse(item.categories)\n          return cats.includes(category)\n        })\n  }\n\n  return (\n    <div className={`catalogue is-${view}`}>\n      <Categories\n        categories={categories}\n        category={category}\n        setCategory={setCategory}\n      />\n      <ul className=\"catalogue-item-list\">\n        {filtered().map((item, index) => (\n          <li className=\"catalogue-item\" key={`catalogue_item_${index}`}>\n            <CatalogueItem\n              index={index}\n              item={item}\n              onSelect={onSelect}\n              view={view}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Catalogue\n","export default __webpack_public_path__ + \"static/media/logo.2fa5e016.svg\";","import logo from '../../assets/images/logo.svg'\nimport './Error.scss'\n\nfunction Error({text = 'An error occurred'}) {\n  return (\n    <div className=\"error\">\n      <div>\n        <img src={logo} alt=\"StepZen\" className=\"logo\" />\n        <p>{text}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Error\n","function GraphiQLPanel({\n  body,\n  className = '',\n  footer,\n  onTogglePanel,\n  title = 'Panel',\n}) {\n  return (\n    <div\n      className={`generator-wrap ${footer ? 'has-footer' : ''} ${className}`}\n    >\n      <div className=\"generator-title-bar\">\n        <div className=\"generator-title\">{title}</div>\n        <div className=\"generator-rhs\">\n          <div className=\"generator-close\" onClick={onTogglePanel}>\n            ✕\n          </div>\n        </div>\n      </div>\n      <div className=\"generator-content\">{body}</div>\n      {footer ? <div className=\"generator-footer-bar\">{footer}</div> : null}\n    </div>\n  )\n}\n\nexport default GraphiQLPanel\n","import logo from '../../assets/images/logo.svg'\nimport './Loading.scss'\n\nfunction Loading({text = 'Loading'}) {\n  return (\n    <div className=\"loading\">\n      <div>\n        <img src={logo} alt=\"StepZen\" className=\"logo\" />\n        <p>{text}...</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Loading\n","const Button = ({\n  children,\n  className = '',\n  disabled = false,\n  id,\n  onClick = () => {},\n  type = 'button',\n}) => (\n  <button\n    className={`button ${className}`}\n    disabled={disabled}\n    type={type}\n    onClick={onClick}\n    id={id}\n  >\n    {children}\n  </button>\n)\n\nexport default Button\n","const Checkbox = ({\n  checked = false,\n  disabled = false,\n  id,\n  label,\n  name,\n  onChange = () => {},\n  readonly = false,\n  type = 'checkbox',\n  value = '',\n}) => (\n  <div className=\"checkbox field\">\n    {label ? (\n      <label>\n        <input\n          defaultChecked={checked}\n          disabled={disabled}\n          onChange={onChange}\n          id={id || name}\n          name={name}\n          readOnly={readonly}\n          type={type}\n          value={value}\n        />\n        {label}\n      </label>\n    ) : (\n      <input\n        defaultChecked={checked}\n        disabled={disabled}\n        onChange={onChange}\n        id={id || name}\n        name={name}\n        readOnly={readonly}\n        type={type}\n        value={value}\n      />\n    )}\n  </div>\n)\n\nexport default Checkbox\n","const TextArea = ({\n  disabled = false,\n  id,\n  label,\n  name,\n  onChange = () => {},\n  placeholder = '',\n  readonly = false,\n  required = true,\n  rows = 3,\n  type = 'text',\n  value,\n}) => (\n  <div className=\"field\">\n    <label htmlFor={id || name}>{label}</label>\n    <textarea\n      defaultValue={value}\n      disabled={disabled}\n      onChange={onChange}\n      name={name}\n      id={id || name}\n      type={type}\n      placeholder={placeholder}\n      readOnly={readonly}\n      required={required}\n      rows={rows}\n    />\n  </div>\n)\n\nexport default TextArea\n","const TextField = ({\n  disabled = false,\n  id,\n  label,\n  name,\n  onChange = () => {},\n  placeholder = '',\n  readonly = false,\n  required = true,\n  type = 'text',\n  value,\n}) => (\n  <div className=\"field\">\n    {label ? <label htmlFor={id || name}>{label}</label> : null}\n    <input\n      defaultValue={value}\n      disabled={disabled}\n      onChange={onChange}\n      name={name}\n      id={id || name}\n      type={type}\n      placeholder={placeholder}\n      readOnly={readonly}\n      required={required}\n    />\n  </div>\n)\n\nexport default TextField\n","import {Checkbox} from '../../../Forms'\n\nfunction ListQuestion({answers, handleOnChange, question}) {\n  const handleOnChangeCheckbox = evt => {\n    const {checked, name, value} = evt.target\n\n    const current = answers[name]?.split(',') || []\n\n    const answer = checked\n      ? current.concat(value).join(',')\n      : current.filter(item => item !== value).join(',')\n\n    const simulated = {\n      target: {\n        name: question.name,\n        value: answer,\n      },\n    }\n\n    handleOnChange(simulated)\n  }\n\n  return (\n    <div className=\"field\">\n      <p>{question.message}</p>\n      {question.type === 'checkbox' ? (\n        <>\n          {question.choices.map(choice => (\n            <Checkbox\n              label={choice}\n              name={question.name}\n              id={`${question.name}_${choice}`}\n              onChange={handleOnChangeCheckbox}\n              value={choice}\n              type=\"checkbox\"\n            />\n          ))}\n        </>\n      ) : null}\n      {question.type === 'list' ? (\n        <>\n          {question.choices.map(choice => (\n            <Checkbox\n              label={choice}\n              name={question.name}\n              id={`${question.name}_${choice}`}\n              onChange={handleOnChange}\n              value={choice}\n              type=\"radio\"\n            />\n          ))}\n        </>\n      ) : null}\n    </div>\n  )\n}\n\nexport default ListQuestion\n","import {TextArea, TextField} from '../../../Forms'\n\nfunction TextQuestion({answers, handleOnChange, question}) {\n  return question.type === 'textarea' ? (\n    <TextArea\n      label={question.message}\n      name={question.name}\n      onChange={handleOnChange}\n      rows={10}\n      type={question.type}\n      value={answers[question.name]}\n    />\n  ) : (\n    <TextField\n      label={question.message}\n      name={question.name}\n      onChange={handleOnChange}\n      type={question.type}\n      value={answers[question.name]}\n    />\n  )\n}\n\nexport default TextQuestion\n","import React, {useEffect, useState} from 'react'\n\nimport {Button} from '../../Forms'\nimport CatalogueItem from '../CatalogueItem'\nimport Loading from '../../Loading'\nimport {merge, set} from 'lodash'\n\nimport ListQuestion from './ListQuestion'\nimport TextQuestion from './TextQuestion'\n\nimport './Questions.scss'\n\nconst {REACT_APP_IS_DEVELOPMENT} = process.env\n\nfunction Questions({answers, selected, setAnswers, setResults, setSelected}) {\n  const [questions, setQuestions] = useState([])\n  const [errors, setErrors] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [status, setStatus] = useState(-1)\n\n  useEffect(() => {\n    handleOnConfigure()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleOnCancel = evt => {\n    evt.preventDefault()\n\n    setAnswers({})\n    setSelected(null)\n  }\n\n  const handleOnChange = evt => {\n    const {name, value} = evt.target\n\n    const updated = {}\n    set(updated, name, value.trim())\n    const merged = merge(answers, updated)\n\n    setAnswers(merged)\n  }\n\n  const handleOnConfigure = async evt => {\n    if (evt) evt.preventDefault()\n\n    setLoading(true)\n\n    let host = window.location.origin\n    if (REACT_APP_IS_DEVELOPMENT) host = host.replace(':3000', ':5000')\n\n    try {\n      const response = await fetch(\n        `${host}/api/generate/configure?id=${\n          selected.id\n        }&details=${JSON.stringify(answers)}`,\n      )\n      const json = await response.json()\n\n      setErrors(JSON.parse(json.errors))\n      setQuestions(JSON.parse(json.questions))\n      setStatus(json.status)\n    } catch (error) {\n      setErrors([{error}])\n    }\n\n    setLoading(false)\n  }\n\n  const handleOnImport = async evt => {\n    evt.preventDefault()\n\n    setLoading(true)\n\n    let host = window.location.origin\n    if (REACT_APP_IS_DEVELOPMENT) host = host.replace(':3000', ':5000')\n\n    try {\n      const response = await fetch(\n        `${host}/api/generate/create?id=${selected.id}&details=${JSON.stringify(\n          answers,\n        )}`,\n      )\n      const result = await response.json()\n\n      if (result.error) {\n        setErrors(['An unknown error occurred'])\n      } else {\n        setResults(true)\n      }\n    } catch (error) {\n      setErrors([{error}])\n    }\n\n    setLoading(false)\n  }\n\n  return (\n    <>\n      <CatalogueItem disabled item={selected} />\n      <hr />\n      {loading ? (\n        <Loading />\n      ) : (\n        <>\n          {errors.length ? (\n            <div className=\"generator-errors\">\n              <ul>\n                {errors.map((error, index) => (\n                  <li key={`error_${index}_${error}`}>{error}</li>\n                ))}\n              </ul>\n            </div>\n          ) : null}\n          {status === -1 ? (\n            <form className=\"form\" onSubmit={handleOnConfigure}>\n              {questions.map(question => (\n                <>\n                  {['checkbox', 'list'].includes(question.type) ? (\n                    <ListQuestion\n                      answers={answers}\n                      handleOnChange={handleOnChange}\n                      question={question}\n                    />\n                  ) : (\n                    <TextQuestion\n                      answers={answers}\n                      handleOnChange={handleOnChange}\n                      question={question}\n                      type={question.type || 'text'}\n                    />\n                  )}\n                </>\n              ))}\n              <div className=\"buttons field\">\n                <Button disabled={loading} type=\"submit\">\n                  Configure\n                </Button>\n                <Button\n                  className=\"is-link\"\n                  onClick={handleOnCancel}\n                  type=\"button\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          ) : null}\n          {status === 0 || status === 1 ? (\n            <form className=\"form\" onSubmit={handleOnImport}>\n              {status === 0 ? (\n                <p>\n                  {selected.name} will be validated at query time. Click\n                  \"Generate\" to generate a schema.\n                </p>\n              ) : null}\n              {status === 1 ? (\n                <p>\n                  Successfully connected to {selected.name}. Click \"Generate\" to\n                  generate a schema.\n                </p>\n              ) : null}\n              <Button disabled={loading} type=\"submit\">\n                Generate\n              </Button>\n              <Button\n                className=\"is-link\"\n                onClick={handleOnCancel}\n                type=\"button\"\n              >\n                Cancel\n              </Button>\n            </form>\n          ) : null}\n        </>\n      )}\n    </>\n  )\n}\n\nexport default Questions\n","import {Button} from '../../Forms'\nimport CatalogueItem from '../CatalogueItem'\n\nfunction Results({\n  onToggleGenerator,\n  results,\n  selected,\n  setAnswers,\n  setResults,\n  setSelected,\n}) {\n  const handleOnBack = evt => {\n    evt.preventDefault()\n\n    setResults()\n  }\n\n  const handleOnDone = evt => {\n    evt.preventDefault()\n\n    setAnswers({})\n    setResults()\n    setSelected()\n\n    onToggleGenerator()\n  }\n\n  return (\n    <div className=\"form\">\n      <CatalogueItem disabled item={selected} />\n      <hr />\n      {results.error ? (\n        <>\n          <div className=\"generator-errors\">\n            <ul>\n              <li>\n                An error occurred. Please check your console for more\n                information.\n              </li>\n            </ul>\n          </div>\n          <Button onClick={handleOnBack} className=\"is-link\">\n            Back\n          </Button>\n        </>\n      ) : (\n        <>\n          <p>Successfully generated your schema</p>\n          <Button onClick={handleOnDone}>Close</Button>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Results\n","import {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faList, faThLarge} from '@fortawesome/free-solid-svg-icons'\nimport {useEffect, useState} from 'react'\n\nimport Catalogue from './Catalogue'\nimport Error from '../Error'\nimport GraphiQLPanel from '../GraphiQLPanel'\nimport Loading from '../Loading'\nimport Questions from './Questions'\nimport Results from './Results'\n\nimport './Generator.scss'\n\nconst {REACT_APP_IS_DEVELOPMENT} = process.env\n\nfunction Generator({onTogglePanel}) {\n  const [answers, setAnswers] = useState({})\n  const [catalogue, setCatalogue] = useState()\n  const [error, setError] = useState(false)\n  const [loading, setLoading] = useState(true)\n  const [results, setResults] = useState()\n  const [selected, setSelected] = useState()\n\n  const startView = window.localStorage.getItem('generator-view') || 'list'\n  const [view, setView] = useState(startView)\n\n  const handleSwitchView = (evt, value) => {\n    evt.preventDefault()\n\n    setView(value)\n    window.localStorage.setItem('generator-view', value)\n  }\n\n  useEffect(() => {\n    ;(async () => {\n      let host = window.location.origin\n      if (REACT_APP_IS_DEVELOPMENT) host = host.replace(':3000', ':5000')\n\n      try {\n        const response = await fetch(`${host}/api/generate/engines`)\n        const json = await response.json()\n\n        setCatalogue(json)\n        setLoading(false)\n      } catch (error) {\n        setError(true)\n      }\n    })()\n  }, [])\n\n  return (\n    <GraphiQLPanel\n      body={\n        <>\n          {error ? <Error text=\"Could not load code generators\" /> : null}\n          {loading && !error ? <Loading /> : null}\n          {!loading && !error ? (\n            <>\n              {!selected ? (\n                <Catalogue\n                  catalogue={catalogue}\n                  onSelect={setSelected}\n                  view={view}\n                />\n              ) : null}\n              {selected && !results ? (\n                <Questions\n                  answers={answers}\n                  selected={selected}\n                  setAnswers={setAnswers}\n                  setResults={setResults}\n                  setSelected={setSelected}\n                />\n              ) : null}\n              {results ? (\n                <Results\n                  onToggleGenerator={onTogglePanel}\n                  results={results}\n                  selected={selected}\n                  setAnswers={setAnswers}\n                  setResults={setResults}\n                  setSelected={setSelected}\n                />\n              ) : null}\n            </>\n          ) : null}\n        </>\n      }\n      footer={\n        selected ? null : (\n          <ul className=\"generator-view-switcher\">\n            <li className=\"generator-view-switcher-view\">\n              <button\n                className={`generator-view-switcher-switch ${\n                  view === 'list' ? 'is-selected' : ''\n                }`}\n                onClick={evt => handleSwitchView(evt, 'list')}\n                type=\"button\"\n              >\n                <FontAwesomeIcon icon={faList} />\n                <span>List</span>\n              </button>\n            </li>\n            <li className=\"generator-view-switcher-view\">\n              <button\n                className={`generator-view-switcher-switch ${\n                  view === 'grid' ? 'is-selected' : ''\n                }`}\n                onClick={evt => handleSwitchView(evt, 'grid')}\n                type=\"button\"\n              >\n                <FontAwesomeIcon icon={faThLarge} />\n                <span>Grid</span>\n              </button>\n            </li>\n          </ul>\n        )\n      }\n      className=\"is-generators\"\n      onTogglePanel={onTogglePanel}\n      title=\"Schema Templates\"\n    ></GraphiQLPanel>\n  )\n}\n\nexport default Generator\n","import {useEffect} from 'react'\nimport {useHistory, useParams} from 'react-router-dom'\n\nconst {REACT_APP_IS_DEVELOPMENT} = process.env\n\nfunction Redirection() {\n  const {folder, name} = useParams()\n  const history = useHistory()\n\n  useEffect(() => {\n    ;(async () => {\n      let host = window.location.origin\n      if (REACT_APP_IS_DEVELOPMENT) host = host.replace(':3000', ':5000')\n\n      const response = await fetch(`${host}/api/details`)\n      const json = await response.json()\n\n      const {endpoint} = json.workspace\n      const parts = endpoint.split('/')\n\n      if (parts[0] !== folder || parts[1] !== name) {\n        history.push(`/${endpoint}`)\n      }\n    })()\n  }, [folder, history, name])\n  return null\n}\n\nexport default Redirection\n","import './ServerStatus.scss'\n\nfunction ServerStatus() {\n  return (\n    <div className=\"server-status-overlay\">\n      <div className=\"server-status-pop\">\n        <p className=\"pop-copy\">\n          Run <code>stepzen start</code> to re-enable this explorer.\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default ServerStatus\n","import Toggle from 'react-toggle'\nimport {useEffect, useState} from 'react'\nimport * as yaml from 'yaml'\n\nimport {Button, TextArea} from '../Forms'\n\nimport './PredicatesToggle.scss'\nimport 'react-toggle/style.css'\n\nconst {REACT_APP_IS_DEVELOPMENT} = process.env\n\nfunction PredicatesToggle() {\n  const [available, setAvailable] = useState(true)\n  const [enabled, setEnabled] = useState(false)\n  const [error, setError] = useState()\n  const [loading, setLoading] = useState(true)\n\n  const [predicatesHeaders, setPredicatesHeaders] = useState('')\n\n  let host = window.location.origin\n  if (REACT_APP_IS_DEVELOPMENT) host = host.replace(':3000', ':5000')\n\n  useEffect(() => {\n    ;(async () => {\n      const response = await fetch(`${host}/api/predicates`)\n      const {predicates} = await response.json()\n\n      setAvailable(predicates.available)\n      setEnabled(predicates.enabled)\n      setLoading(false)\n    })()\n  })\n\n  const updatePredicates = async checked => {\n    setLoading(true)\n\n    const response = await fetch(`${host}/api/predicates`, {\n      body: JSON.stringify({\n        enabled: checked,\n        headers: yaml.parse(predicatesHeaders),\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    })\n\n    const {predicates} = await response.json()\n\n    setEnabled(predicates.enabled)\n    setLoading(false)\n  }\n\n  const handleOnChange = async evt => {\n    const {checked} = evt.target\n\n    setEnabled(checked)\n\n    await updatePredicates(checked)\n  }\n\n  const handleOnChangePredicatesHeaders = async evt => {\n    const {value} = evt.target\n\n    setPredicatesHeaders(value)\n  }\n\n  const handleUpdateSettings = async evt => {\n    evt.preventDefault()\n\n    try {\n      yaml.parse(predicatesHeaders)\n\n      setError(null)\n      setLoading(true)\n\n      await updatePredicates(enabled)\n    } catch {\n      setError('Headers must be valid JSON or YAML')\n    }\n  }\n\n  return available ? (\n    <div className=\"predicates-toggle\">\n      <label>\n        <span>Rulesets / custom headers are {enabled ? 'ON' : 'OFF'}</span>\n        <Toggle\n          checked={enabled}\n          disabled={loading}\n          onChange={handleOnChange}\n        />\n      </label>\n      {enabled ? (\n        <div className=\"predicates-settings\">\n          <form className=\"form\" onSubmit={handleUpdateSettings}>\n            {error ? error : null}\n            <p>Please enter any authentication headers, e.g.</p>\n            <pre>{'{\"Authorization\": \"Apikey [token]\"}'}</pre>\n            <TextArea\n              id=\"predicates-headers\"\n              label=\"Headers\"\n              name=\"predicates-headers\"\n              onChange={handleOnChangePredicatesHeaders}\n              required={false}\n              rows={12}\n              value={predicatesHeaders}\n            />\n            <hr />\n            <Button type=\"submit\">Update</Button>\n          </form>\n        </div>\n      ) : null}\n    </div>\n  ) : null\n}\n\nexport default PredicatesToggle\n","// import DebuggingToggle from \"../DebuggingToggle\";\nimport GraphiQLPanel from '../GraphiQLPanel'\nimport PredicatesToggle from '../PredicatesToggle'\n\nimport './SettingsPanel.scss'\n\nfunction SettingsPanel({onTogglePanel}) {\n  return (\n    <GraphiQLPanel\n      body={\n        <>\n          {/* Commented out for now, we cannot release Debugging until we have removed \"stepzen defaults\" */}\n          {/* <DebuggingToggle />\n          <hr />\n          <br />\n          <details>\n            <summary>Advanced Settings</summary> */}\n          <div className=\"advanced-settings-container\">\n            <PredicatesToggle />\n          </div>\n          {/* </details> */}\n        </>\n      }\n      title=\"Settings\"\n      onTogglePanel={onTogglePanel}\n    ></GraphiQLPanel>\n  )\n}\n\nexport default SettingsPanel\n","import './SettingsToggle.scss'\n\nfunction SettingsToggle({onClick}) {\n  return (\n    <button className=\"settings-toggle\" onClick={onClick} type=\"button\">\n      Settings\n    </button>\n  )\n}\n\nexport default SettingsToggle\n","const localStorage = (folder, name) => ({\n  getItem: key => {\n    return window.localStorage.getItem(`${folder}-${name}-${key}`)\n  },\n  removeItem: key => {\n    return window.localStorage.removeItem(`${folder}-${name}-${key}`)\n  },\n  setItem: (key, value) => {\n    return window.localStorage.setItem(`${folder}-${name}-${key}`, value)\n  },\n})\n\nexport default localStorage\n","const getQuery = (arg, spaceCount) => {\n  const {operationDataList} = arg\n  const {query} = operationDataList[0]\n  const anonymousQuery = query.replace(/query\\s.+{/gim, `{`)\n  return (\n    ` `.repeat(spaceCount) +\n    anonymousQuery.replace(/\\n/g, `\\n` + ` `.repeat(spaceCount))\n  )\n}\n\nconst apolloQuery = {\n  name: `useQuery hook`,\n  language: `Apollo`,\n  codeMirrorMode: `jsx`,\n  options: [],\n  generate: arg => `import { gql, useQuery } from '@apollo/client';\n\nconst GET_QUERY = gql\\`\n  query MyQuery ${getQuery(arg, 2)}\n\\`;\n\nfunction ComponentName() {\n  const { loading, error, data } = useQuery(GET_QUERY);\n\n  if (loading) return <p>Loading ...</p>;\n\n  if (error) return (\n    <pre>{JSON.stringify(error, null, 2)}</pre>\n  );\n\n  return (\n    <pre>{JSON.stringify(data, null, 2)}</pre>\n  );\n}\n\nexport default ComponentName\n\n`,\n}\n\nconst gatsbyPageQuery = {\n  name: `Page query`,\n  language: `Gatsby`,\n  codeMirrorMode: `jsx`,\n  options: [],\n  generate: arg => `import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst ComponentName = ({ data }) => <pre>{JSON.stringify(data, null, 4)}</pre>\n\nexport const query = graphql\\`\n${getQuery(arg, 2)}\n\\`\n\nexport default ComponentName\n\n`,\n}\n\nconst gatsbyStaticHook = {\n  name: `StaticQuery hook`,\n  language: `Gatsby`,\n  codeMirrorMode: `jsx`,\n  options: [],\n  generate: arg => `import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst ComponentName = () => {\nconst data = useStaticQuery(graphql\\`\n${getQuery(arg, 4)}\n\\`)\nreturn <pre>{JSON.stringify(data, null, 4)}</pre>\n}\n\nexport default ComponentName\n\n`,\n}\n\nconst gatsbyStaticQuery = {\n  name: `StaticQuery`,\n  language: `Gatsby`,\n  codeMirrorMode: `jsx`,\n  options: [],\n  generate: arg => `import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst ComponentName = () => (\n<StaticQuery\n  query={graphql\\`\n${getQuery(arg, 6)}\n  \\`}\n  render={data => <pre>{JSON.stringify(data, null, 4)}</pre>}\n></StaticQuery>\n)\n\nexport default ComponentName\n\n`,\n}\n\nconst snippets = [\n  apolloQuery,\n  gatsbyPageQuery,\n  gatsbyStaticHook,\n  gatsbyStaticQuery,\n]\n\nexport default snippets\n","import {buildClientSchema, getIntrospectionQuery} from 'graphql'\nimport GraphiQL from 'graphiql'\nimport CodeExporter from 'graphiql-code-exporter'\nimport GraphiQLExplorer from 'graphiql-explorer'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {useLocation, useParams} from 'react-router-dom'\n\nimport Generator from '../Generator'\nimport Loading from '../Loading'\nimport Redirection from '../Redirection'\nimport ServerStatus from '../ServerStatus'\nimport SettingsPanel from '../SettingsPanel'\nimport SettingsToggle from '../SettingsToggle'\n\nimport localStorage from '../../helpers/localStorage'\nimport snippets from '../../helpers/snippets'\n\nimport logo from '../../assets/images/logo.svg'\nimport './Explorer.scss'\n\nconst {REACT_APP_IS_DEVELOPMENT} = process.env\n\nfunction Explorer() {\n  const {folder, name} = useParams()\n  const search = useLocation().search\n\n  const storage = useMemo(() => localStorage(folder, name), [folder, name])\n\n  const [details, setDetails] = useState(null)\n  const [explorerIsOpen, setExplorerIsOpen] = useState(\n    storage.getItem('is-explorer-open') === 'true',\n  )\n  const [exporterIsOpen, setExporterIsOpen] = useState(\n    storage.getItem('is-exporter-open') === 'true',\n  )\n  const [isError, setIsError] = useState(false)\n  const [generatorIsOpen, setGeneratorIsOpen] = useState(\n    storage.getItem('is-generator-open') === 'true',\n  )\n  const [settingsIsOpen, setSettingsIsOpen] = useState(\n    storage.getItem('is-settings-open') === 'true',\n  )\n  const [graphiQL, setGraphiQL] = useState(null)\n  const [query, setQuery] = useState(null)\n  const [schema, setSchema] = useState(null)\n  const [serverAvailable, setServerAvailable] = useState(true)\n\n  let host = window.location.origin\n  if (REACT_APP_IS_DEVELOPMENT) host = host.replace(':3000', ':5000')\n\n  useEffect(() => {\n    const PING_INTERVAL = 5000\n\n    const interval = setInterval(async () => {\n      try {\n        await fetch(`${host}/api/ping`)\n        setServerAvailable(true)\n        console.log('stepzen start running')\n      } catch (err) {\n        setServerAvailable(false)\n        console.log('stepzen start NOT running')\n      }\n    }, PING_INTERVAL)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n\n  const fetcher = useCallback(\n    graphQLParams => {\n      fetch(`${host}/api/details`)\n        .then(response => response.json())\n        .then(result => {\n          if (!storage.getItem('graphiql:queries') && result.samples) {\n            setQuery(result.samples)\n          }\n          setDetails(result)\n        })\n\n      return fetch(`${host}/api/graphql`, {\n        method: 'post',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(graphQLParams),\n      }).then(response => response.json())\n    },\n    [host, storage],\n  )\n\n  useEffect(() => {\n    document.title = `StepZen - ${folder}/${name}`\n    fetcher({\n      query: getIntrospectionQuery(),\n    })\n      .then(result => {\n        if (result.data) {\n          setSchema(buildClientSchema(result.data))\n        } else {\n          setIsError(true)\n        }\n      })\n      .catch(() => setIsError(true))\n  }, [fetcher, folder, name])\n\n  // This useEffect sets what the user sees in the Query panel\n  // - if you pass a query through the URL, it will set that\n  // - Otherwise it will look in history (which is in localStorage)\n  // - Otherwise it will see if there are any samples\n  // - Lastly it will display our static message content\n  useEffect(() => {\n    ;(async () => {\n      // This is us trying to set from ?query=\n      const params = new URLSearchParams(search)\n      if (params.get('query')) {\n        setQuery(params.get('query'))\n        return\n      }\n\n      // This is us trying to set from any query history\n      const history = storage.getItem('graphiql:queries')\n      if (history) {\n        const json = JSON.parse(history)\n        const [last] = json.queries.slice(-1)\n        setQuery(last.query)\n        return\n      }\n\n      // This is us seeing if there are any samples available\n      const response = await fetch(`${host}/api/samples`)\n      if (response.ok) {\n        const {samples} = await response.json()\n        if (samples) {\n          setQuery(samples)\n          return\n        }\n      }\n\n      // No query param, no history, no samples. Set a predefined message\n      setQuery(`# Welcome to StepZen!\n# ===================\n#\n# - Explore your current schema by selecting \"Explorer\"\n# - Generate React components by selecting \"Export\"\n#\n# Read more at http://stepzen.com/docs\n#\n`)\n    })()\n  }, [host, search, storage])\n\n  const handleEditQuery = query => {\n    setQuery(query)\n  }\n\n  const handleToggleExplorer = () => {\n    const isOpen = !explorerIsOpen\n    setExplorerIsOpen(isOpen)\n    storage.setItem('is-explorer-open', isOpen)\n  }\n\n  const handleToggleExporter = () => {\n    const isOpen = !exporterIsOpen\n    setExporterIsOpen(isOpen)\n    storage.setItem('is-exporter-open', isOpen)\n  }\n\n  const handleToggleGenerator = () => {\n    const isOpen = !generatorIsOpen\n    setGeneratorIsOpen(isOpen)\n    storage.setItem('is-generator-open', isOpen)\n  }\n\n  const handleToggleSettings = () => {\n    const isOpen = !settingsIsOpen\n    setSettingsIsOpen(isOpen)\n    storage.setItem('is-settings-open', isOpen)\n  }\n\n  if (isError) {\n    return (\n      <div className=\"graphiql-container\">\n        <div className=\"graphiql-container\">\n          <Redirection />\n          <Generator onClose={handleToggleGenerator} />\n          <div className=\"error-or-loading\">\n            <img src={logo} alt=\"StepZen\" className=\"logo\" />\n            <p>\n              Could not load <code>{details.endpoint}</code>\n            </p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return schema ? (\n    <div className=\"graphiql-container\">\n      <Redirection />\n      {serverAvailable ? null : <ServerStatus></ServerStatus>}\n      {generatorIsOpen ? (\n        <Generator onTogglePanel={handleToggleGenerator} />\n      ) : null}\n      {explorerIsOpen ? (\n        <GraphiQLExplorer\n          explorerIsOpen={explorerIsOpen}\n          query={query}\n          onEdit={handleEditQuery}\n          onRunOperation={operationName =>\n            graphiQL.handleRunQuery(operationName)\n          }\n          onToggleExplorer={handleToggleExplorer}\n          schema={schema}\n        />\n      ) : null}\n      <div className=\"graphiql-container\">\n        <GraphiQL\n          fetcher={fetcher}\n          query={query}\n          onEditQuery={handleEditQuery}\n          ref={ref => setGraphiQL(ref)}\n          schema={schema}\n          storage={storage}\n        >\n          <GraphiQL.Logo>\n            <img src={logo} alt=\"StepZen\" />\n          </GraphiQL.Logo>\n          {details ? (\n            <GraphiQL.Footer>\n              <p className=\"endpoint\">\n                {details.endpoint.replace('.io', '.net')}\n              </p>\n            </GraphiQL.Footer>\n          ) : null}\n          <GraphiQL.Toolbar>\n            <GraphiQL.Button\n              onClick={handleToggleExplorer}\n              label=\"Explorer\"\n              title=\"Toggle Explorer\"\n            />\n            <GraphiQL.Button\n              onClick={() => graphiQL.handlePrettifyQuery()}\n              label=\"Prettify\"\n              title=\"Prettify Query (Shift-Ctrl-P)\"\n            />\n            <GraphiQL.Button\n              onClick={() => graphiQL.handleToggleHistory()}\n              label=\"History\"\n              title=\"Show History\"\n            />\n\n            {/* <GraphiQL.Button onClick={handleToggleGenerator} label=\"Import\" title=\"Toggle Import\" /> */}\n            {/* When we get all the use cases working there we can revisit this button. But for now let's hide it since it is not entirely correct. */}\n            <GraphiQL.Button\n              onClick={handleToggleExporter}\n              label=\"Export\"\n              title=\"Toggle Export\"\n            />\n            {settingsIsOpen ? null : (\n              <SettingsToggle onClick={handleToggleSettings} />\n            )}\n          </GraphiQL.Toolbar>\n        </GraphiQL>\n      </div>\n      {exporterIsOpen ? (\n        <CodeExporter\n          codeMirrorTheme=\"default\"\n          hideCodeExporter={handleToggleExporter}\n          query={query}\n          snippets={snippets}\n        />\n      ) : null}\n      {settingsIsOpen ? (\n        <SettingsPanel onTogglePanel={handleToggleSettings} />\n      ) : null}\n    </div>\n  ) : (\n    <div className=\"graphiql-container\">\n      <Loading />\n    </div>\n  )\n}\n\nexport default Explorer\n","import {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Explorer from './components/Explorer'\nimport Redirection from './components/Redirection'\n\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path=\"/:folder/:name\">\n          <Explorer />\n        </Route>\n        <Route component={Redirection} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}